	ORG 65500		; memory: [0, 65535] 
primes: dab 0,250,127,128	; primes[0] is on position (starts on) primes+1, i.e. primes[] occupies memory: [65501, 65503]
;========= Registers usage =========
; R0: index
; R1: divider
; R3: primes[x]
; R6: Stack Pointer (SP)
; R7: Program Counter (PC)


;================     main    ================
	ORG 00
	MOV #3, R0			; Loop counter (vector index) = 4
	MOV primes(R0), R3		; R3 = primes(R0)
	JSR R7, verify_prime		; verify if the number is prime with subroutine
	SOB R0, 10			; decrement R0 and goes back 2 instructions (10 addresses) if not zero
	HLT				; end of program

;================ SUBROUTINES ================	
verify_prime:
	TST R3				; load flags with R3 (primes(R0)) information
	BEQ end_verification		; Z==1 (primes(R0)==0)
	BMI not_prime			; N==1 (primes(R0)<0)
	DEC R3				
	BEQ end_verification		; Z==1 (primes(R0)==1)
	DEC R3				
	BEQ end_verification		; Z==1 (primes(R0)==2)
	ADD #2, R3
	; R3 = primes(R0)
	ROR R3
	BCC not_prime			; C==0 (pair number)
	ROL R3
	; R3 = primes(R0)
	MOV #3, R1
loop_verification:
	SUB R1, R3
	BEQ test_equal			; Z==1, check if R1 is a divider that is not primes(R0) -> not prime
	BPL loop_verification
	; R3-R1<0, try another divider
	ADD #2, R1			; R1+=2 (check division with odd numbers, as primes(R0) is not pair)
	MOV primes(R0), R3		; R3 = primes(R0)
	BR loop_verification		; try another division with new divider (R1)
test_equal:
	CMP R1, primes(R0)
	BEQ end_verification		; Z==1 (primes(R0)==R1), thus, it is only divided per 1 and itself
not_prime:
	CLR primes(R0)
end_verification:
	RTS R7				; end of subroutine (return to main)
